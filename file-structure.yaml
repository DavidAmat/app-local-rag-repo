machine-learning-platform:
  widget_framework:
    contract_negotiation.py:
      ContractNegotiation:
      - __init__
      - create_raw_input_data_from_contract_input
      - create_contract_output_from_output_data
      - create_contract_input_from_raw_input_data
    data_loader.py:
      WidgetFrameworkDataLoader:
      - __init__
      - load_training_raw_features
      - load_prediction_raw_features
    precomputed_setup.py:
      functions:
      - parse_input
    api.py:
      functions:
      - inference
      - production_app
      - local_app
    mapper.py:
      WidgetFrameworkMapper:
      - map_request_to_keys
      - map_values_to_response
      - map_raw_input_data_to_keys
    notebooks:
      debug:
        utils_debug.py:
          DebugUtils:
          - ping
          - post
          - pretty
          - pretty_full
          - pretty_exclude
          - save_pickle
          - read_pickle
          - neat_output
          - plot_ts
        competing_carousels:
          plot_beta_distrib.py:
            BetaPlot:
            - __init__
            - plot
            - create_plot
          inference:
            plot_utils.py:
              functions:
              - plot_beta_distributions
            utils_inference.py:
              functions:
              - get_conn
              - qq
              - read_sql_with_params
              - compute_raw_alpha_beta
              - compute_alpha_beta
              - sample_from_beta
              - query_mab_params
              - get_mab_params
    tests:
      test_api.py:
        functions:
        - contract
        - input_data
        - input_contract
        - input_contract_2
        - input_contract_3
        - examples_v2_test
        - feature_store_side_effect
        - feature_store_side_effect_content
        - feature_store_side_effect_competing
        - test_invocations
        - test_invocations_competing
        - test_get_day_of_week
        - test_find_hour_bucket_label
        - test_unit_ExperimentString
        - test_unit_UserSegmentation
        - test_unit_get_widget_ranking
        - test_unit_get_content
      policies:
        test_base_policy.py:
          ContractInputMock:
          - __init__
          ConcretePolicy:
          - get_widget_ranking
          TestBasePolicy:
          - setup_policy
          - setup_input_contract
          - test_validate_feature_cfg_valid
          - test_validate_feature_cfg_missing_key
          - test_validate_config_valid
          - test_validate_config_missing_key
          - test_validate_config_invalid_type
          - test_get_key_feature_cfg_single_key
          - test_get_key_feature_cfg_multiple_keys
          - test_fetch_metrics_with_fake_feature_store
          - test_fetch_metrics_with_real_feature_store
          functions:
          - input_contract
          - policy_cfg
          - policy
        test_egreedy_dow_policy.py:
          TestEGreedyDoWPolicy:
          - setup_policy
          - mock_fetch_metrics
          - test_get_widget_ranking_with_exploitation
          - test_get_widget_ranking_with_new_prev_explored_widget
          - test_get_widget_ranking_new_widget
          - test_get_widget_ranking_with_exploration
          - test_get_widget_ranking_with_missing_metrics
          - test_validate_config_missing_key
          - test_validate_config_invalid_type
          - test_get_widget_ranking_with_fixed_seed
          functions:
          - input_contract
          - policy_cfg
          - policy
      examples_checks:
        checks_v2.py:
          functions:
          - check_ranker
          - main
    src:
      widget_builder.py:
        WidgetBuilder:
        - __init__
        - preprocess_input
        - postprocess_output
        - run
        - pretty_output
      experiment_string.py:
        ExperimentString:
        - __init__
        - parse_variant
        - validate_variants
      utils.py:
        Timer:
        - __init__
        - stop
        ClassGroups:
        - __init__
        - get_members
        - add_member
        FactoryGroups:
        - __init__
        - get_groups
        - add_group
        Utils:
        - fs_fetch_feature_value
        - base_model2dict
        - read_avro_contract
        - read_config_widget_builder
        - _read_yaml
        - _read_fast_yaml
        - print_time
        - remove_trailing_comma
        - shorten_array_stores
        - list_intersection_simple
        - flatten_list
        - print_json_pretty_old
        - print_json_pretty
        - json_serialiser
        - master_prettify
        - list_intersection
        - compare_lists
        - compare_class_groups
        - compare_dicts
        ContractInput:
        - ensure_experiment_string_is_non_empty
        - convert_keys_to_int
        - set_flag_allowlist_provided
      widget_ranking:
        prova.py:
          functions:
          - find_hour_bucket_label
        widget_ranker.py:
          WidgetRanker:
          - __init__
          - get_day_of_week
          - find_hour_bucket_label
          - parse_input_contract
          - get_widget_ranking
          - check_if_match
          - resolve_groups_from_input
          - resolve_ranking_map
          - filter_allowlist_widgets
          - filter_widget_slots
      widget_content:
        fs_dummy.py:
          functions:
          - feature_store_test
        dummy_profiler.py:
          functions:
          - print_time
        widget_content.py:
          WidgetContent:
          - __init__
          - get_content_single_widget
          - get_content
          - get_byo_filter_id
      io:
        starburst_reader.py:
          StarburstReader:
          - __init__
          - read_sql
          - get_query
          - run
          - read_query
          - run_query_full_path
          - run_query
      examples:
        example_v4_dev.py:
          functions:
          - to_experiment_string
          - get_example_v4
        example_test_v1.py:
          functions:
          - variant
          - get_example_test
        example_v5_cc.py:
          functions:
          - to_experiment_string
          - get_example_v5
          - get_example_debug
          - get_example_v5_test
        example_test_v2.py:
          functions:
          - to_experiment_string
          - get_example_test
        example_v1.py:
          functions:
          - variant
          - get_example_v1
        example_v3.py:
          functions:
          - to_experiment_string
          - get_example_v3
        example_v2.py:
          functions:
          - to_experiment_string
          - get_example_v2
        example_v5_dow_greedy_cc.py:
          functions:
          - to_experiment_string
          - get_example_v5_test
      widget_competing:
        policy_factory.py:
          PolicyFactory:
          - __init__
          - get_policy
        widget_competing.py:
          WidgetCompeting:
          - __init__
          - run
          - get_fixed_and_competing_widgets_whitelisted
        epsilong_greedy.py:
          EpsilonGreedyPolicy:
          - get_widget_ranking
        thompson_sampling.py:
          ThompsonSampling:
          - __init__
          - get_eligible_widgets
          - whitelist_widgets_in_metrics
          - get_widget_ranking
          - compute_alpha_beta
          - sample_from_beta
        fake_feature_store.py:
          FakeFeatureStoreV1Data:
          - __init__
          FakeFeatureStoreV2Data:
          - __init__
          FakeFeatureStoreV3Data:
          - __init__
          FakeFeatureStore:
          - __init__
          - get_feature_value
        policies.py:
          BasePolicy:
          - __init__
          - get_widget_ranking
          - validate_feature_cfg
          - validate_config
          - fetch_metrics
          - get_key_feature_cfg
          DynamicSegmentsPolicy:
          - get_widget_ranking
          PureThompsonSamplingPolicy:
          - get_widget_ranking
          EpsilonGreedyDoWPolicy:
          - parse_feature_store_value
          - get_widget_ranking
          RandomPolicy:
          - get_widget_ranking
      user_segmentation:
        user_segment.py:
          UserSegmentation:
          - __init__
          - get_segments_group
          - get_segmentation_function
          - activation
          - total_orders
    workflows:
      training_competing_carousels.py:
        functions:
        - get_config
        - etl_cities
        - train_widget_metrics
        - report_city_results
        - dag_training
      precompute_predictions.py:
        functions:
        - precompute_predictions_pipeline
        - precompute_predictions_for_segment
        - collect_runtime_info
        - get_deployed_models_per_segment
        - load_train_config
        - load_data
        - precompute_predictions
        - identity
        - report_results
    estimators:
      base_estimator.py:
        WidgetFrameworkEstimator:
        - __init__
        - prepare_features
        - fit
        - predict
        functions:
        - extract_labels_from_raw_input_data
      variant001_estimator.py:
        Variant001WidgetFrameworkEstimator:
        - __init__
        - prepare_features
        - fit
        - predict
    monitoring:
      logging.py:
        functions:
        - init_logger
        - init_metrics
        - init_metrics_global
      notifier.py:
        functions:
        - send_message_to_slack
    competing_widgets:
      src:
        aws_utils.py:
          AwsTools:
          - __init__
          - list_partitions
          - exists
          - s3_upload_file
          - s3_upload_parquet
          - s3_upload_pickle
          - s3_download_pickle
          - s3_download_bulk_obj
          - s3_upload_bulk_obj
          - s3_download_file
          - s3_upload_dict
          - s3_read_dict
          - get_boto3_session
          - get_s3_fs
          - save_dask_parquet_to_s3
          - read_dask_parquet_from_s3
          - s3_remove_versions
        utils.py:
          DateTools:
          - today_str
          - today_date
          - yesterday_str
          - to_date
          - to_str
          - subtract_days
          - date2ts
          - date2tsms
          - is_valid_date_format
          UtilsSeg:
          - __init__
          - robust_scaler
          - quantile_scaler
          - raw_quantile_scaler
          - pca_quantile_scaler
          - col_ratio
          UtilsCW:
          - pivot_table
          - mask
          - masks
          - filter
          - filters
          - check_duplicates
          - save_pickle
          - read_pickle
          - compute_quantiles
          - df_quantiles
          - ratio
          - gen_batch_months
        simulator:
          environment.py:
            ContextualEnvironment:
            - __init__
            - sample_users
            - simulate_arm
            - calculate_reward
          ground_truth.py:
            GroundTruthUsers:
            - __init__
            GroundTruthUsersTSWarmUp:
            - __init__
            GroundTruthUsersSegments:
            - __init__
            GroundTruthSegment:
            - __init__
          simulator.py:
            Simulator:
            - __init__
            - create_gtu_warmup_ts
            - create_environment
            - map_users_to_segments
            - from2d_to_1d
            - table_ts_params
            - history_ts_params
            - history_simulation_step
            - run
            - s3_read_history_simulation
            - s3_read_simulator_objects
            - save_s3
            - run_dummy
          policies.py:
            Policy:
            - __init__
            - select_arm
            - update_policy
            PolicyPool:
            - __init__
            - add_policy
            - __len__
            OptimalPolicy:
            - __init__
            - select_arm
            - update_policy
            RandomPolicy:
            - __init__
            - select_arm
            - update_policy
            OneArmPolicy:
            - __init__
            - select_arm
            - update_policy
            TSUserPolicy:
            - __init__
            - initialization_type
            - generate_alpha_beta
            - select_arm
            - get_ts_params
            - update_policy
            EpsilonGreedyPolicy:
            - __init__
            - initialization_type
            - generate_user_metrics
            - select_arm
            - update_policy
            TSDynamicSegmentPolicy:
            - __init__
            - initialization_type
            - generate_user_metrics
            - generate_user_segment_map
            - generate_segment_metrics
            - generate_alpha_beta
            - select_arm
            - get_ts_params
            - update_policy
            TSSegmentPolicy:
            - __init__
            - select_arm
            - get_ts_params
            - update_policy
            PolicyFactory:
            - __init__
            - get_policy_pool
        archive:
          segmentator.py:
            SegmentationV1:
            - __init__
            - run
            - read_data
            - bring_segments
            - fit
            - create_mapping_user_segment
            - read_mapping_user_segment
            - clustering_report
            - preprocessing
            SegmentationV2:
            - __init__
            - get_data
            - read_single_query
            - _segmentator_s3_reader
          reporter.py:
            SimulationReporter:
            - __init__
            - report_simulation_step
            - report_policy
        training:
          training_widget_metrics.py:
            WidgetMetrics:
            - __init__
            - run
            - compute_segment_metrics
            - whitelist_widgets
            - read_s3_etl_data
            - compute_cvr_user_widget
            - map_users_to_segments
          config.py:
            TrainingConfig:
            - __init__
            - create_tmp_folder
          kafka_producer.py:
            KafkaProducer:
            - __init__
            - get_ddp_creation_time
            - generator_producer_rows_user_segments_ddp
            - generator_producer_rows_segment_metrics_ddp
            - batch_producer_rows
            - publish_df
          etl_competing_carousels.py:
            ETLReader:
            - __init__
            - run
            - upload_to_s3
            - run_query_starburst_date
            - run_query_starburst
            - generate_batch_cities
            - get_path_task
            - get_path_partition
            - get_metrics_sql_params
            - get_path_sql_query_storewall
            - get_path_sql_query_storewall_date
        preprocessors:
          ground_truth_segment_preprocess.py:
            GroundTruthSegmentPreprocess:
            - __init__
            - get_user_segment_map
            - run
            - aggregate_segment_widget_level
            - create_ground_truth
            - s3_read_ground_truth
          ground_truth_base_preprocess.py:
            GroundTruthBasePreprocess:
            - __init__
            - _get_ground_truth
            - join_store_wall_ranking_with_widgets
            - create_base
            - run
            - s3_save_ground_truth
            - s3_read_ground_truth_task
            - agg
            - merge_cartesian
          ground_truth_synthetic_data_gaussian.py:
            User:
            - __init__
            UserSegment:
            - __init__
            - generate_behaviors
            SyntheticGenerator:
            - __init__
            - generate_synthetic_data
            - simulate_sessions
            - aggregate_data
            - create_user_widget_pairs
            - run
            - load_data
          ground_truth_users_preprocess.py:
            GroundTruthUsersPreprocess:
            - __init__
            - run
            - aggregate_user_widget_level
            - create_ground_truth
            - get_params
            - s3_read_ground_truth
          ground_truth_synthetic_data.py:
            User:
            - __init__
            UserSegment:
            - __init__
            - generate_behaviors
            SyntheticGenerator:
            - __init__
            - generate_synthetic_data
            - simulate_sessions
            - aggregate_data
            - run
            - load_data
          segmentation_preprocess.py:
            SegmentatorPreprocessor:
            - __init__
            - aggregate_data
            SegmentatorPreprocessorV1:
            - __init__
            - aggregate_data
            SegmentatorPreprocessorV4:
            - __init__
            - aggregate_data
          clusterers:
            segmentation_clusterers.py:
              SegmentationClustererBase:
              - __init__
              - cluster
              - s3_upload_artifacts
              - s3_download_artifacts
              - read_parquet_artifact
              - static_read_parquet_artifact
              - read_pickle_artifact
              ClustererV11:
              - __init__
              - get_data
              - cluster
              - silhouette_plot
              - preprocess
              - add_ratio_features
              - add_total_features
              - report
              ClustererV41:
              - __init__
              - get_data
              - cluster
              - report
              - silhouette_plot
              ClustererV42:
              - __init__
              ClustererFactory:
              - select_clusterer
        workflows:
          workflow_etl_simulator.py:
            functions:
            - get_config
            - get_city_list
            - etl_run_city
            - merge_cities
            - report_etl_results
            - dag_etl_simulator
        etl_dp:
          etl_segmentation.py:
            QuerySegmentationsType:
            - __init__
            - get_segmentation_queries
            ETLSegmentator:
            - __init__
            - segmentator_user_global_features
            - segmentator_ground_truth
          etl_ground_truth.py:
            GroundTruthQuery:
            - __init__
            - get_sql_path
            ETLGroundTruth:
            - __init__
            - run_task_query_full_time
            - run_etl_simulator_monthly_batch
        etl_s3:
          s3_read_ground_truth.py:
            S3ReadGroundTruth:
            - __init__
            - get_task
            - _ground_truth_s3_reader
          s3_read_segmentation.py:
            S3ReadETLSegmentation:
            - __init__
            - get_data
            - get_query_name
            - _segmentation_s3_reader_query
            SegmentatorPreprocessorS3Reader:
            - __init__
            - read_clusterization_dataframe
        monitoring:
          logging.py:
            functions:
            - init_logger
            - init_metrics
        dashboarding:
          plot_utils.py:
            PlotParams:
            - __init__
            - __getattr__
            - add_thousand
            - add_bold
            - get_legend_pos
            Colors:
            - __init__
            ElementMaps:
            - __init__
          app.py:
            functions:
            - H1
            - H2
            - P
            - update_policy_plots
            - left_update_policy_plots
            - right_update_policy_plots
            - update_segment_plots
            - left_update_segment_plots
            - right_update_segment_plots
            - update_user_plots
            - left_update_user_plots
            - right_update_user_plots
          app_synthetic.py:
            functions:
            - H1
            - create_plot
            - update_plot
          etl_single_version.py:
            ETLSimulationArtifacts:
            - __init__
            - load_history_simulation
            - load_history_policy
            - load_master_objects
            SimulationVersionMetrics:
            - __init__
            - logger_header
            - run
            - save_table
            - load_table
            - get_table_time_policy
            - get_table_time_policy_widget
            - get_table_time_users_x_segment
            - get_simulation_report
            - get_table_time_policy_widget_segment
            - get_table_policy_widget_segment
            - get_table_policy_history
          plots_single_version.py:
            PlotLine:
            - __init__
            PlotBar:
            - __init__
            PlotGroupedBar:
            - __init__
            PlotTable:
            - __init__
            PlotMovingBeta:
            - __init__
      plot_settings:
        utils_plot.py:
          functions:
          - get_vpal_at_number
          - get_vpal_at_name
      config:
        configuration.py:
          Pathtype:
          - __init__
          - format
          - __repr__
          CWConfig_Synthetic:
          - __init__
          - parse_file
          CWConfig_Simulator:
          - __init__
          - parse_file
          - get
          - get_path
          - cities
          - prefix_s3_ground_truth
          - prefix_s3_segmentation
          - prefix_s3_clustering
          - prefix_s3_simulation_history
          - prefix_s3_policy_history
          - prefix_s3_simulator_objects
          - path_local_query_cache_ground_truth
          - path_local_query_cache_segmentation
          - path_local_reporting
          - path_local_reporting_single_version
          - path_local_s3_cache_ground_truth
          - path_local_s3_cache_segmentation
          - path_local_s3_cache_clustering
          - path_simulation_history
          - path_policy_history
          - path_simulator_objects
    scripts:
      loadtest.py:
        functions:
        - generate_payload
        - main
      measure_latency_api_fs.py:
        functions:
        - api_request
        - main
      run_manual_api.py:
        functions:
        - main
      run_manual_api_dev.py:
        functions:
        - main
